(export memo-test)

(import
  :std/test
  :clan/utils/base :clan/utils/memo :clan/utils/number)

(def memo-test
  (test-suite "test suite for clan/utils/memo"
    (test-case "Check define-memo-function"
      (def counter 0)
      (def (foo x) [x (pre-increment! counter)])
      (define-memo-function (bar x) (foo x))
      (def baz (memoizing foo))
      (def (quux x) (memoized-funcall foo x))
      (def (quuux x) (memoized-apply foo (list x)))
      (def (normalize-keyux-arguments a: (a 1) b: (b 2)) [a: a b: b])
      (define-memo-function ((keyux normalization: normalize-keyux-arguments) a: (a 1) b: (b 2))
        [a b (pre-increment! counter)])
      (check-equal? (foo 'a) '(a 1))
      (check-equal? (foo 'b) '(b 2))
      (check-equal? (foo 'a) '(a 3))
      (check-equal? (foo 'c) '(c 4))
      (check-equal? (bar 'a) '(a 5))
      (check-equal? (bar 'a) '(a 5))
      (check-equal? (baz 'a) '(a 6))
      (check-equal? (baz 'a) '(a 6))
      (check-equal? (quux 'a) '(a 7))
      (check-equal? (quuux 'a) '(a 7))
      (check-equal? (bar 'c) '(c 8))
      (check-equal? (bar 'b) '(b 9))
      (check-equal? (bar 'a) '(a 5))
      (check-equal? (bar 'c) '(c 8))
      (check-equal? (bar 'a) '(a 5))
      (check-equal? (baz 'a) '(a 6))
      (check-equal? (quux 'a) '(a 7))
      (check-equal? (quuux 'a) '(a 7))
      (check-equal? (keyux) '(1 2 10))
      (check-equal? (keyux a: 1 b: 2) '(1 2 10))
      (check-equal? (keyux a: 1) '(1 2 10))
      (check-equal? (keyux b: 2) '(1 2 10))
      (check-equal? (keyux a: 3) '(3 2 11))
      (check-equal? (keyux a: 3 b: 2) '(3 2 11))
      (check-equal? (keyux b: 2 a: 3) '(3 2 11)))))

(export
  poo-test)

;; NB: For debugging, use (import :std/interactive)

(import
  :clan/poo/poo
  :gerbil/gambit/ports
  :std/format :std/sort :std/srfi/13 :std/test
  :clan/utils/assert :clan/utils/base)

(defrules with-output-to-string ()
  ((_ forms ...)
   (call-with-output-string (位 (port) (with-output-to-port port (位 () forms ...))))))

(def poo-test
  (test-suite "test suite for clan/poo/poo"
    (test-case "simple tests from poo.md"
      (assert-equal! (poo? (poo () () () (x 1) (y 2))) #t)
      (assert-equal! (poo? 42) #f)
      (defpoo foo () () (x 1))
      (.def foo y (x) (+ x 3))
      (assert-equal! (.get foo y) 4)
      (defpoo bar () () (x 1))
      (assert-equal! (.get bar x) 1)
      (.set! bar x 18)
      (assert-equal! (.get bar x) 18)
      (assert-equal! (.has? foo 'y) #t)
      (assert-equal! (.has? foo 'z) #f)
      (def (sort-symbols symbols) (sort symbols (位 (a b) (string< (symbol->string a) (symbol->string b)))))
      (assert-equal! (sort-symbols (.all-slots foo)) '(x y))
      (assert-equal! (sort-symbols (.all-slots foo)) '(x y))
      (def my-point (poo () () () (x 3) (y 4)))
      (defpoo blued () () (color 'blue))
      (def my-colored-point (.mix blued my-point))
      (assert-equal! (.ref my-colored-point 'x) 3)
      (assert-equal! (.ref my-colored-point 'y) 4)
      (assert-equal! (.ref my-colored-point 'color) 'blue)
      (assert-equal! (.get my-colored-point x) (.ref my-colored-point 'x))
      (defpoo complex () (x y) (x+iy (+ x (* 0+1i y))))
      (defpoo polar () (x+iy) (rho (magnitude x+iy)) (theta (angle x+iy)))
      (assert-equal! (.get (.mix my-colored-point polar complex) rho) 5)
    (test-case "slot tests from poo.md"
      (let ((x 1) (y 2))
        (defpoo point () () (x) (y))
        (assert-equal! (map (cut .ref point <>) '(x y)) [1 2]))
      (defpoo gerbil-config () ()
        (modules => prepend '(gerbil gambit)))
      (def (prepend x y) (append y x))
      (defpoo base-config () ()
        (modules '(kernel stdlib init)))
      (assert-equal! (.get (.mix gerbil-config base-config) modules)
                     '(gerbil gambit kernel stdlib init))
      (defpoo hello () (name)
        (language 'en)
        (greeting (format greeting-fmt name))
        (greeting-fmt "hello, ~a"))
      (defpoo localize-hello (hello) (language)
        (name "poo")
        (greeting-fmt (previous) (if (eq? language 'fr) "salut, ~a" (previous))))
      (defpoo french-hello (localize-hello) ()
        (language 'fr))
      (assert-equal! (.get localize-hello greeting) "hello, poo")
      (assert-equal! (.get french-hello greeting) "salut, poo")))
    (test-case "simple hello tests"
      (defpoo hello () ()
        (name (error "Undefined"))
        (greeting (format "Hello, ~a." name))
        (level 0))
      (defpoo alice (hello) ()
        (name "Alice")
        (level => + 1)
        (language 'english)
        (greeting (previous) (if (eq? language 'french) (format "Salut, ~a." name) (previous))))
      (defpoo bob (alice) (greeting)
        (name "Bob")
        (level => + 1)
        (greet (位 () (displayln greeting))))
      (def french (poo () () () (language 'french) (level => + 1)))
      (assert-equal! (.get alice name) "Alice")
      (assert-equal! (.get bob name) "Bob")
      (assert-equal! (.get alice greeting) "Hello, Alice.")
      (assert-equal! (with-output-to-string (.call bob greet)) "Hello, Bob.\n")
      (assert-equal! (with-output-to-string (.call (.mix french bob) greet)) "Salut, Bob.\n"))
    (test-case "testing side-effects"
      (def foo (poo () () () (x 6)))
      (.def foo y (x) (* x 7))
      (defpoo bar (foo) (x y) (z (+ x 3)) (all [x y z]))
      (assert-equal! (.get foo x) 6)
      (assert-equal! (.get foo y) 42)
      (assert-equal! (.get bar x) 6)
      (assert-equal! (.get bar y) 42)
      (.set! bar x 1)
      (assert-equal! (.get foo x) 6)
      (assert-equal! (.get foo y) 42)
      (assert-equal! (.get foo x) 6)
      (assert-equal! (.get foo y) 42)
      (assert-equal! (.get bar x) 1)
    )))
